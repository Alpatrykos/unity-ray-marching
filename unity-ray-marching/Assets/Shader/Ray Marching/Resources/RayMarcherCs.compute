#pragma kernel RayMarch

#include "../SDF/SDF.cginc"

Texture2D<float4> src;
RWTexture2D<float4> dst;

float4x4 cameraInvProj;
float4x4 cameraToWorld;
float4 cameraPos;
int2 screenSize; // width / height

StructuredBuffer<SdfShape> aSdfShape;
int numSdfShapes;

float4 rayMarchParams; // maxSteps, hitDist, maxDist, time
float blendDist;

float4 backgroundColor;
float4 missColor;

float map(float3 p)
{
  const float3 kSphereCenter = float3(0.0f, 0.0f, 5.0f);
  const float kSphereRadius = 1.0f;

  if (numSdfShapes <= 0)
    return 1e16;

  float res = 1e16;

  // union
  for (int i = 0; i < numSdfShapes; ++i)
  {
    if (aSdfShape[i].data0.y != kSdfUnion)
      continue;

    res = sdf_uni_smooth(res, sdf_shape(p, aSdfShape[i]), blendDist);
  }

  // subtraction
  for (int i = 0; i < numSdfShapes; ++i)
  {
    if (aSdfShape[i].data0.y != kSdfSubtraction)
      continue;

    res = sdf_sub_smooth(res, sdf_shape(p, aSdfShape[i]), blendDist);
  }

  // intersection
  for (int i = 0; i < numSdfShapes; ++i)
  {
    if (aSdfShape[i].data0.y != kSdfIntersection)
      continue;

    res = sdf_int_smooth(res, sdf_shape(p, aSdfShape[i]), blendDist);
  }

  return res;
}

float3 normal(float3 p)
{
  return sdf_normal(p, map, 0.01f);
}

float3 march(float3 ro, float3 rd)
{
  const float3 kDiffuse = float3(1.0f, 0.65f, 0.05f);
  const float3 kAmbient = 0.1f * kDiffuse;

  const int maxSteps = int(rayMarchParams.x);
  const float hitDist = rayMarchParams.y;
  const float maxDist = rayMarchParams.z;
  const float t = rayMarchParams.w;

  float dist = 0.0f;
  for (int i = 0; i < maxSteps; ++i)
  {
    float3 p = ro + dist * rd;
    float d = map(p);

    if (d < hitDist)
    {
      float3 n = normal(p);
      float3 lightPos = ro + float3(0.0f * sin(2.0f * t), 0.0f * cos(2.0f * t) + 1.0f, 0.0f);
      float3 lightDir = normalize(p - lightPos);
      float3 shaded = max(pow(dot(n, -lightDir), 1.0f), kAmbient) * kDiffuse;
      float3 fresnel = 0.3f * pow(saturate(1.0f - dot(n, -rd)), 2.0f);
      float3 specular = 0.2f * pow(saturate(dot(n, -normalize(rd + lightDir))), 100.0f);
      return shaded + fresnel + specular;
    }

    if (dist > maxDist)
      return backgroundColor.rgb;

    dist += d;
  }

  return missColor.rgb;
}

[numthreads(8, 8, 1)]
void RayMarch(uint3 id : SV_DispatchThreadID)
{
  float2 uv = float2(id.xy) / screenSize;
  float4 view = mul(cameraInvProj, float4(uv * 2.0f - 1.0f, 0.0f, 1.0f));

  float3 ro = cameraPos.xyz;
  float3 rd = normalize(mul(cameraToWorld, float4(view.xyz, 0.0f)).xyz);
  float3 col = march(ro, rd);

  dst[id.xy] = float4(col, 1.0f);
}
